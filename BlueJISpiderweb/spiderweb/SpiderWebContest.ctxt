#BlueJ class context
comment0.target=SpiderWebContest
comment0.text=\r\n\ This\ class\ is\ to\ resolve\ the\ problem\ of\ the\ Spider\ Walk\ and\ \r\n\ simulate\ its\ solution\ \r\n\ @author\ Sebastian\ Cardona\ -\ Diego\ Cardenas\ \r\n\ @version\ 1.0\r\n
comment1.params=strands\ favorite\ bridges
comment1.target=SpiderWebContest(int,\ int,\ int[][])
comment1.text=\r\n\ Constructor\ for\ objects\ of\ class\ SpiderWebContest\r\n\ this\ class\ have\ the\ solution\ of\ the\ Spider\ Walk\ problem\ and\ its\ simulation\r\n\ @param\ strands\ the\ total\ of\ strands\r\n\ @param\ favorite\ the\ favorite\ strand\ of\ the\ spider\ to\ sleep\r\n\ @param\ bridges\ the\ current\ bridges\ of\ the\ simulation\r\n
comment10.params=x\ l\ r\ nodoActual
comment10.target=int\ query(int,\ int,\ int,\ int)
comment11.params=strands\ favorite\ bridges
comment11.target=int[]\ solve(int,\ int,\ int[][])
comment11.text=\r\n\ solve\ the\ problem\ of\ the\ Spider\ Walk\ using\ segement\ tree\r\n\ @param\ strands\r\n\ @param\ favorite\r\n\ @param\ bridges\r\n\ @return\ a\ array\ with\ the\ solution\ of\ the\ problem\r\n
comment12.params=newFavorite
comment12.target=void\ setFavorite(int)
comment13.params=strands\ favorite\ bridges\ strand
comment13.target=void\ simulate(int,\ int,\ int[][],\ int)
comment13.text=\r\n\ simulate\ the\ problem\ of\ the\ Spider\ Walk\ for\ a\ specific\ start\ strand\r\n\ @param\ strands\r\n\ @param\ favorite\r\n\ @param\ bridges\r\n\ @param\ strand\r\n
comment14.params=strands\ favorite\ bridges
comment14.target=void\ simulate(int,\ int,\ int[][])
comment14.text=\r\n\ simulate\ the\ problem\ of\ the\ Spider\ Walk\ for\ all\ the\ strands,\ so\ the\ spider\ start\ to\ sit\ in\ the\ first\r\n\ strand,\ create\ the\ new\ bridges\ and\ walk\ to\ the\ favorite\ strand,\ then\ the\ spider\ return\ to\ the\ center\r\n\ and\ delete\ the\ bridges\ that\ it\ created,\ then\ the\ spider\ start\ to\ sit\ in\ the\ second\ strand\ and\ do\ the\ same\r\n\ @param\ strands\r\n\ @param\ favorite\r\n\ @param\ bridges\r\n
comment15.params=bridge
comment15.target=arrayToArrayList(int[][])
comment16.params=initStrand\ strands
comment16.target=java.util.ArrayList\ pasoAPasocreatePasoAPasoDec(int,\ int)
comment17.params=initStrand\ strands
comment17.target=java.util.ArrayList\ pasoAPasocreatePasoAPasoInc(int,\ int)
comment18.params=position\ strand
comment18.target=boolean\ adyacentBridges(int,\ int)
comment19.params=numero1\ numero2
comment19.target=boolean\ compararConMargenError(double,\ double)
comment2.params=
comment2.target=void\ makeVisible()
comment2.text=\r\n\ make\ the\ simulation\ visible\r\n
comment20.params=
comment20.target=void\ finish()
comment20.text=\r\n\ finish\ the\ simulator\r\n
comment3.params=
comment3.target=void\ makeInvisible()
comment3.text=\r\n\ make\ the\ simulation\ visible\r\n
comment4.params=matriz
comment4.target=void\ ordenarMatrizPorPrimerElemento(int[][])
comment4.text=private\ void\ posiblePositions(int[][]\ bridges){\r\n\ \ \ \ \ \ \ \ this.posNewBridges\ \=\ new\ ArrayList<Integer>();\r\n\ \ \ \ \ \ \ \ for(int\ i\ \=0;\ i<bridges.length;i++){\r\n\ \ \ \ \ \ \ \ \ \ \ \ int\ pos\ \=\ bridges[i][0];\r\n\ \ \ \ \ \ \ \ \ \ \ \ if(pos\ \!\=\ 1){\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ posNewBridges.add(pos-1);\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ posNewBridges.add(bridges[bridges.length-1][0]+1);\r\n}
comment5.params=x\ val
comment5.target=int\ updateMin(int,\ int)
comment6.params=l\ r\ nodoActual
comment6.target=void\ down(int,\ int,\ int)
comment7.params=l\ r\ nodoActual
comment7.target=void\ build(int,\ int,\ int)
comment8.params=L\ R\ l\ r\ nodoActual\ v\ type
comment8.target=void\ modify(int,\ int,\ int,\ int,\ int,\ int,\ int)
comment9.params=x\ l\ r\ nodoActual\ v
comment9.target=void\ smodify(int,\ int,\ int,\ int,\ int)
numComments=21
