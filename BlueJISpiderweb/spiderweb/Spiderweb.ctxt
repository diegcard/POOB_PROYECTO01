#BlueJ class context
comment0.target=Spiderweb
comment0.text=\r\n\ La\ clase\ Spiderweb\ representa\ una\ telara\u00F1a\ con\ hilos,\ puentes\ y\ una\ ara\u00F1ita.\r\n\ La\ telara\u00F1a\ se\ compone\ de\ un\ n\u00FAmero\ espec\u00EDfico\ de\ hilos,\ que\ se\ extienden\ desde\ el\ centro\ de\ la\ telara\u00F1a\ hasta\ el\ borde.\r\n\ Los\ hilos\ est\u00E1n\ espaciados\ regularmente\ alrededor\ del\ c\u00EDrculo,\ y\ cada\ hilo\ tiene\ un\ punto\ de\ inicio\ y\ un\ punto\ final.\r\n\ La\ telara\u00F1a\ tambi\u00E9n\ incluye\ puentes\ que\ conectan\ los\ hilos,\ y\ puntos\ de\ inicio\ para\ la\ ara\u00F1ita.\r\n\ La\ ara\u00F1ita\ puede\ moverse\ a\ lo\ largo\ de\ los\ hilos\ y\ puentes,\ y\ puede\ descansar\ en\ los\ puntos\ de\ inicio.\r\n\ La\ clase\ incluye\ m\u00E9todos\ para\ agregar\ y\ eliminar\ hilos,\ puentes\ y\ puntos\ de\ inicio,\ y\ para\ mover\ la\ ara\u00F1ita\ a\ lo\ largo\ de\ la\ telara\u00F1a.\r\n\ La\ clase\ tambi\u00E9n\ incluye\ m\u00E9todos\ para\ mostrar\ y\ ocultar\ la\ telara\u00F1a\ y\ sus\ componentes.\r\n\ La\ clase\ se\ utiliza\ para\ simular\ una\ ara\u00F1a\ que\ se\ mueve\ a\ lo\ largo\ de\ una\ telara\u00F1a,\ cruzando\ puentes\ y\ descansando\ en\ puntos\ de\ inicio.\r\n\r\n\ @author\ Diego\ Cardenas\ y\ Sebastian\ Cardona\r\n\ @version\ 1.2\r\n
comment1.params=strands\ radio
comment1.target=Spiderweb(int,\ int)
comment1.text=\r\n\ Constructor\ de\ la\ clase\ Spiderweb.\r\n\ Crea\ una\ telara\u00F1a\ con\ un\ n\u00FAmero\ espec\u00EDfico\ de\ hilos\ y\ un\ radio\ dado.\r\n\ La\ telara\u00F1a\ se\ inicializa\ con\ los\ puntos\ de\ inicio\ de\ los\ hilos\ y\ la\ ara\u00F1ita.\r\n\r\n\ @param\ strands\ El\ n\u00FAmero\ de\ hilos\ que\ formar\u00E1n\ la\ telara\u00F1a.\r\n\ @param\ radio\ \ \ El\ radio\ de\ la\ telara\u00F1a\ desde\ el\ centro.\r\n
comment10.params=
comment10.target=void\ makeInvisible()
comment10.text=\r\n\ Make\ invisible\ all\ the\ simulator\r\n
comment11.params=type\ firstStrand\ distance\ color
comment11.target=Bridge\ createBridge(java.lang.String,\ int,\ int,\ java.lang.String)
comment11.text=\r\n\ Create\ a\ bridge\ between\ two\ threads\ with\ a\ specific\ type\r\n\r\n\ @param\ type\ \ \ \ \ \ \ \ the\ type\ of\ bridge\ to\ create\r\n\ @param\ firstStrand\ the\ first\ thread\r\n\ @param\ distance\ \ \ \ the\ distance\ from\ the\ center\ of\ the\ web\ to\ the\ bridge\r\n\ @param\ color\ \ \ \ \ \ \ the\ color\ of\ the\ bridge\r\n\ @return\ the\ bridge\ created\r\n
comment12.params=type\ firstStrand\ distance\ color
comment12.target=Bridge\ createBridge2(java.lang.String,\ int,\ int,\ java.lang.String)
comment12.text=\r\n\ Create\ a\ bridge\ between\ two\ threads\ with\ a\ specific\ type\r\n\r\n\ @param\ type\ \ \ \ \ \ \ \ the\ type\ of\ bridge\ to\ create\r\n\ @param\ firstStrand\ the\ first\ thread\r\n\ @param\ distance\ \ \ \ the\ distance\ from\ the\ center\ of\ the\ web\ to\ the\ bridge\r\n\ @param\ color\ \ \ \ \ \ \ the\ color\ of\ the\ bridge\r\n\ @return\ the\ bridge\ created\r\n
comment13.params=color\ distance\ firstStrand
comment13.target=void\ addBridge(java.lang.String,\ int,\ int)
comment13.text=\r\n\ Adds\ a\ bridge\ between\ two\ points\ on\ the\ screen,\ given\ a\ color,\ a\ distance,\ and\ a\ starting\ coordinate.\r\n\r\n\ @param\ color\ \ \ \ \ \ \ the\ color\ of\ bridge\r\n\ @param\ distance\ \ \ \ The\ distance\ from\ the\ center\ point\ where\ the\ bridge\ will\ be\ located.\r\n\ @param\ firstStrand\ initial\ thread\ where\ the\ bridge\ will\ be\ located\r\n
comment14.params=type\ color\ distance\ firstStrand
comment14.target=void\ addBridge(java.lang.String,\ java.lang.String,\ int,\ int)
comment14.text=\r\n\ Adds\ a\ specific\ type\ of\ bridge\ between\ two\ threads\ in\ the\ web.\r\n\ @param\ type\ the\ type\ of\ bridge\ to\ add\r\n\ @param\ color\ the\ color\ of\ the\ bridge\r\n\ @param\ distance\ the\ distance\ from\ the\ center\ of\ the\ web\ to\ the\ bridge\r\n\ @param\ firstStrand\ the\ first\ thread\ where\ the\ bridge\ will\ be\ located\r\n
comment15.params=puente\ strandi
comment15.target=void\ addBridgeInStrand(Bridge,\ int)
comment15.text=\r\n\ Add\ the\ bridge\ to\ the\ corresponding\ thread\ in\ a\ hashMap\r\n\r\n\ @param\ puente\ \ the\ bridge\ to\ add\r\n\ @param\ strandi\ the\ thread\ where\ the\ bridge\ will\ be\ added\r\n
comment16.params=
comment16.target=int[]\ getPosCenterImage()
comment16.text=\r\n\ Get\ the\ center\ of\ the\ image\r\n\r\n\ @return\ an\ array\ with\ the\ x\ and\ y\ coordinates\r\n
comment17.params=fisrtStrand\ distance
comment17.target=float[]\ calculedPoints(int,\ int)
comment18.params=color\ distance
comment18.target=void\ relocateBridge(java.lang.String,\ int)
comment18.text=\r\n\ Relocate\ bridges\ of\ a\ specific\ color\ a\ given\ distance\ from\ the\ center\ of\ the\ web.\r\n\r\n\ @param\ color\ \ \ \ The\ color\ of\ the\ bridge\ to\ move.\r\n\ @param\ distance\ The\ new\ distance\ from\ the\ center\ of\ the\ circle\ to\ the\ bridge\ attachment\ point.\r\n
comment19.params=color
comment19.target=void\ delBridge(java.lang.String)
comment19.text=\r\n\ Eliminate\ spider\ web\ bridges\ based\ on\ their\ color.\r\n\r\n\ @param\ color\ The\ color\ of\ the\ bridge\ to\ remove.\r\n
comment2.params=strands\ favorite\ bridges
comment2.target=Spiderweb(int,\ int,\ int[][])
comment2.text=\r\n\ Constructor\ de\ la\ clase\ Spiderweb.\r\n\r\n\ @param\ strands\ \ El\ n\u00FAmero\ de\ hilos\ que\ formar\u00E1n\ la\ telara\u00F1a.\r\n\ @param\ favorite\ El\ hilo\ favorito\ de\ la\ ara\u00F1a.\r\n\ @param\ bridges\ \ Los\ puentes\ que\ conectan\ los\ hilos.\r\n
comment20.params=strand
comment20.target=boolean\ isAStrandWithASpot(int)
comment20.text=\r\n\ look\ if\ a\ strand\ has\ a\ spot\r\n\ @param\ strand\ the\ strand\ to\ look\r\n\ @return\ true\ if\ the\ strand\ has\ a\ spot,\ false\ otherwise\r\n
comment21.params=color
comment21.target=void\ delBridgelogical(java.lang.String)
comment22.params=color\ strand
comment22.target=void\ addSpot(java.lang.String,\ int)
comment22.text=\r\n\ Adds\ a\ favorite\ place\ for\ the\ spider\ to\ sleep,\ represented\ by\ a\ circle\r\n\ @param\ color\ the\ spot\ color\r\n\ @param\ strand\ where\ the\ spot\ will\ be\r\n
comment23.params=type\ color\ strand
comment23.target=void\ addSpot(java.lang.String,\ java.lang.String,\ int)
comment23.text=\r\n\ Adds\ a\ favorite\ place\ for\ the\ spider\ to\ sleep,\ represented\ by\ a\ circle\r\n\ with\ a\ specific\ type\r\n\r\n\ @param\ type\ \ the\ type\ of\ spot\ to\ add\r\n\ @param\ color\ the\ spot\ color\r\n\ @param\ strand\ where\ the\ spot\ will\ be\r\n
comment24.params=color
comment24.target=void\ delSpot(java.lang.String)
comment24.text=\r\n\ Eliminates\ the\ spider's\ favorite\ sleeping\ places,\ classified\ by\ color\r\n\r\n\ @param\ color\ the\ color\ spot\ to\ eliminate\r\n
comment25.params=x1\ y1\ x2\ y2
comment25.target=double\ getDistance(float,\ float,\ float,\ float)
comment25.text=\r\n\ Find\ the\ distance\ between\ two\ points\r\n\r\n\ @param\ x1\ the\ x\ coordinate\ of\ the\ first\ point\r\n\ @param\ y1\ the\ y\ coordinate\ of\ the\ first\ point\r\n\ @param\ x2\ the\ x\ coordinate\ of\ the\ second\ point\r\n\ @param\ y2\ the\ y\ coordinate\ of\ the\ second\ point\r\n\ @return\ the\ distance\ between\ two\ points\r\n
comment26.params=
comment26.target=double\ getDistanceCenterSpider()
comment26.text=\r\n\ Find\ the\ distance\ between\ the\ center\ of\ the\ web\ and\ the\ spider\r\n\r\n\ @return\ the\ distance\ between\ the\ center\ of\ the\ web\ and\ the\ spider\r\n
comment27.params=bridge
comment27.target=double\ getDistanceCenterBridge(Bridge)
comment27.text=\r\n\ Find\ the\ distance\ between\ the\ center\ of\ the\ web\ and\ a\ bridge\r\n\r\n\ @param\ bridge\ the\ bridge\ to\ consult\r\n\ @return\ the\ distance\ between\ the\ center\ of\ the\ web\ and\ a\ bridge\r\n
comment28.params=bridge
comment28.target=double\ getDistanceSpiderBridge(Bridge)
comment28.text=\r\n\ Find\ the\ distance\ between\ the\ spider\ and\ a\ bridge\r\n\r\n\ @param\ bridge\ the\ bridge\ to\ consult\r\n\ @return\ the\ distance\ between\ the\ spider\ and\ a\ bridge\r\n
comment29.params=strand
comment29.target=void\ spiderSit(int)
comment29.text=\r\n\ Specify\ which\ thread\ you\ want\ the\ spider\ to\ start\ its\ journey\ on.\r\n\r\n\ @param\ strand\ the\ thread\ where\ the\ spider\ will\ start\r\n
comment3.params=
comment3.target=void\ newWeb()
comment3.text=\r\n\ This\ method\ is\ used\ to\ create\ a\ new\ web.\r\n\ It\ initializes\ the\ web\ by\ creating\ threads\ (strands\ of\ the\ web)\ in\ a\ circular\ pattern.\r\n\ The\ number\ of\ threads\ and\ their\ positions\ are\ determined\ by\ the\ 'radio'\ and\ 'angulo'\ instance\ variables.\r\n\ Each\ thread\ is\ represented\ by\ an\ instance\ of\ the\ Thread\ class,\ which\ is\ added\ to\ the\ 'listaThreads'\ ArrayList.\r\n\ The\ method\ uses\ a\ while\ loop\ to\ create\ threads\ at\ regular\ intervals\ around\ a\ circle\ until\ it\ completes\ a\ full\ circle\ (360\ degrees).\r\n\ The\ position\ of\ each\ thread\ is\ calculated\ using\ the\ cosine\ and\ sine\ of\ the\ current\ angle\ ('intervalo'),\ multiplied\ by\ the\ 'radio'.\r\n\ The\ 'intervalo'\ is\ then\ incremented\ by\ the\ 'angulo'\ to\ prepare\ for\ the\ creation\ of\ the\ next\ thread.\r\n
comment30.params=advance
comment30.target=void\ spiderWalk(boolean)
comment30.text=\r\n\ Allows\ you\ to\ move\ the\ spider\ forward\ (true)\ or\ backward\ (false)\ automatically\ across\ its\ bridges\r\n\r\n\ @param\ advance\ a\ boolean\ that\ sets\ whether\ the\ spider\ moves\ forward\ or\ backwards\r\n
comment31.params=spot
comment31.target=void\ effectSpots(Spot)
comment31.text=\r\n\ a\ recursive\ method\ that\ allows\ rpetive\ the\ bouncy\ effect\r\n
comment32.params=strand
comment32.target=Spot\ getSpot(int)
comment32.text=\r\n\ if\ a\ strand\ have\ a\ spot,\ this\ metod\ will\ return\ it\r\n\ @param\ strand\ the\ strand\ to\ look\r\n\ @return\ the\ spot\ in\ the\ strand\r\n
comment33.params=hiloActual
comment33.target=Bridge\ findCLoserBridge(int)
comment33.text=\r\n\ Find\ the\ closest\ bridge\ to\ the\ spider\ in\ a\ thread\r\n\r\n\ @param\ hiloActual\ the\ thread\ where\ the\ spider\ is\r\n\ @return\ Bridge\ the\ closest\ bridge\ to\ the\ spider\r\n
comment34.params=x1\ y1\ x2\ y2
comment34.target=void\ addLastRoute(float,\ float,\ float,\ float)
comment34.text=\r\n\ Add\ the\ last\ route\ to\ the\ list\ of\ routes\ and\ change\ the\ color\ to\ red\r\n\r\n\ @param\ x1\ position\ x1\r\n\ @param\ y1\ position\ y1\r\n\ @param\ x2\ position\ x2\r\n\ @param\ y2\ position\ y2\r\n
comment35.params=
comment35.target=void\ visibleRoute()
comment35.text=\r\n\ Make\ the\ all\ route\ visible\r\n
comment36.params=
comment36.target=void\ invisibleRoute()
comment36.text=\r\n\ Make\ the\ last\ route\ invisible\r\n
comment37.params=
comment37.target=void\ delRoute()
comment37.text=\r\n\ Delete\ the\ last\ route\r\n
comment38.params=hiloActual
comment38.target=void\ moveEsquina(int)
comment38.text=\r\n\ Move\ the\ spider\ to\ a\ corner\r\n\r\n\ @param\ hiloActual\ the\ current\ thread\r\n
comment39.params=puenteCercano
comment39.target=void\ MoverYpasarPuente(Bridge)
comment39.text=\r\n\ Move\ and\ cross\ the\ bridge\r\n\r\n\ @param\ puenteCercano\ the\ closest\ bridge\ to\ the\ spider\r\n
comment4.params=
comment4.target=void\ addStrand()
comment4.text=\r\n\ Adds\ a\ new\ thread\ to\ the\ web.\r\n\ The\ method\ adds\ a\ new\ thread\ to\ the\ web\ by\ creating\ a\ new\ instance\ of\ the\ Thread\ class\ and\ adding\ it\ to\ the\ 'listaThreads'\ ArrayList.\r\n\ The\ new\ thread\ is\ positioned\ at\ a\ regular\ interval\ around\ the\ circle,\ based\ on\ the\ number\ of\ existing\ threads\ and\ the\ 'angulo'\ instance\ variable.\r\n\ The\ method\ uses\ the\ 'angulo'\ to\ calculate\ the\ angle\ at\ which\ the\ new\ thread\ should\ be\ positioned,\ and\ then\ uses\ the\ cosine\ and\ sine\ of\ this\ angle,\ multiplied\ by\ the\ 'radio',\ to\ determine\ the\ x\ and\ y\ coordinates\ of\ the\ new\ thread.\r\n
comment40.params=distance\ strand
comment40.target=boolean\ adyacentBridges(int,\ int)
comment40.text=\r\n\ \ look\ if\ a\ bridge\ I\ want\ to\ put\ is\ adyacent\ to\ another\ bridge\ or\ if\ it\ is\ in\ the\ same\ position\r\n\ @param\ strand\r\n\ @param\ distance\r\n\ @return\ true\ if\ the\ bridge\ is\ in\ the\ strand\ in\ the\ distance,\ false\ otherwise\r\n
comment41.params=puenteCercano\ hiloActual
comment41.target=int\ strandActual(Bridge,\ int)
comment41.text=\r\n\ Relocate\ current\ thread\r\n\r\n\ @param\ puenteCercano\ the\ closest\ bridge\ to\ the\ spider\r\n\ @param\ hiloActual\ \ \ \ the\ current\ thread\r\n\ @return\ int\ the\ current\ thread\r\n
comment42.params=
comment42.target=void\ spiderWalk()
comment42.text=\r\n\ Move\ the\ spider\ automatically\ through\ the\ bridges\r\n
comment43.params=hiloActual
comment43.target=Bridge\ findCLoserBridgeRet(int)
comment43.text=\r\n\ Find\ the\ closest\ bridge\ to\ the\ spider\ in\ a\ thread\r\n\r\n\ @param\ hiloActual\ the\ thread\ where\ the\ spider\ is\r\n\ @return\ Bridge\ the\ closest\ bridge\ to\ the\ spider\r\n
comment44.params=
comment44.target=void\ moveCentro()
comment44.text=\r\n\ Move\ the\ spider\ to\ the\ center\ of\ the\ web\r\n
comment45.params=
comment45.target=void\ spiderRetroceder()
comment45.text=\r\n\ Move\ the\ spider\ to\ the\ center\ of\ the\ web\r\n
comment46.params=arraylist\ entero
comment46.target=boolean\ searchInt(java.util.ArrayList,\ int)
comment46.text=\r\n\ search\ an\ int\ into\ a\ ArrayList\r\n
comment47.params=list
comment47.target=java.util.ArrayList\ deletingRepetive(java.util.ArrayList)
comment47.text=\r\n\ del\ repite\ elements\ in\ a\ Arraylist\r\n
comment48.params=
comment48.target=int[]\ spiderLastPath()
comment48.text=\r\n\ Return\ the\ last\ path\ of\ the\ spider\r\n\ @return\ ArrayList\ with\ the\ x\ and\ y\ coordinates\r\n
comment49.params=
comment49.target=java.lang.String[]\ bridges()
comment49.text=\r\n\ Gives\ all\ bridges\ colors\r\n\r\n\ @return\ an\ Array\ of\ strings\ with\ the\ colors\ of\ the\ bridges\r\n
comment5.params=
comment5.target=java.lang.String[]\ unusedBridges()
comment5.text=\r\n\ This\ method\ is\ used\ to\ find\ and\ return\ the\ colors\ of\ unused\ bridges\ in\ the\ web.\r\n\ It\ iterates\ over\ the\ 'bridges'\ HashMap,\ which\ stores\ the\ bridges\ by\ their\ color.\r\n\ For\ each\ color,\ it\ checks\ if\ the\ first\ bridge\ of\ that\ color\ is\ not\ used\ (i.e.,\ the\ 'isUsed'\ method\ returns\ false).\r\n\ If\ the\ bridge\ is\ not\ used,\ the\ color\ is\ added\ to\ the\ 'noUsados'\ ArrayList.\r\n\ Finally,\ the\ method\ returns\ the\ colors\ of\ the\ unused\ bridges\ as\ an\ array\ of\ Strings.\r\n\r\n\ @return\ An\ array\ of\ Strings\ representing\ the\ colors\ of\ the\ unused\ bridges.\r\n
comment50.params=color
comment50.target=int[]\ bridge(java.lang.String)
comment50.text=\r\n\ Gives\ the\ strands\ that\ connect\ the\ bridge\r\n\r\n\ @param\ color\ the\ color\ of\ the\ bridge\ to\ consult\r\n\ @return\ the\ strands\ that\ connect\ the\ bridge\r\n
comment51.params=
comment51.target=java.lang.String[]\ spots()
comment51.text=\r\n\ Gives\ all\ color\ spots\r\n\r\n\ @return\ an\ Array\ of\ strings\ with\ the\ colors\ of\ the\ spots\r\n
comment52.params=color
comment52.target=int\ spot(java.lang.String)
comment52.text=\r\n\ Gives\ the\ strand\ where\ the\ spot\ is\r\n\r\n\ @param\ color\ the\ color\ of\ the\ spot\ to\ consult\r\n\ @return\ the\ strand\ where\ the\ spot\ is\r\n
comment53.params=
comment53.target=void\ finish()
comment53.text=\r\n\ finish\ the\ simulator\r\n
comment54.params=
comment54.target=boolean\ ok()
comment54.text=\r\n\ return\ if\ the\ last\ move\ was\ ok\r\n\r\n\ @return\ isOk\ a\ boolean\r\n
comment55.params=numero1\ numero2
comment55.target=boolean\ compararConMargenError(double,\ double)
comment55.text=\r\n\ This\ method\ is\ used\ to\ compare\ two\ numbers\ with\ a\ margin\ of\ error.\r\n\r\n\ @param\ numero1\ the\ first\ number\ to\ compare\r\n\ @param\ numero2\ the\ second\ number\ to\ compare\r\n\ @return\ true\ if\ the\ numbers\ are\ equal\ within\ the\ margin\ of\ error,\ false\ otherwise\r\n
comment56.params=
comment56.target=int\ getStrands()
comment56.text=\r\n\ Get\ the\ number\ of\ strands\r\n\r\n\ @return\ the\ number\ of\ strands\r\n
comment57.params=
comment57.target=int\ getCurrentStrand()
comment57.text=\r\n\ Get\ the\ current\ Strand\ where\ The\ Spider\ is\ sit\r\n\r\n\ @return\ the\ number\ current\ strand\r\n
comment58.params=
comment58.target=int\ getRadio()
comment58.text=\r\n\ Get\ the\ radius\ of\ the\ web\r\n\r\n\ @return\ the\ radius\ of\ the\ web\r\n
comment59.params=
comment59.target=java.util.HashMap\ getPuentesPorLineas()
comment6.params=
comment6.target=java.lang.String[]\ reachablesSpots()
comment6.text=\r\n\ This\ method\ is\ used\ to\ return\ the\ spots\ where\ it\ is\ possible\ to\ reach\ using\ bridges\ and\ threads.\r\n\r\n\ @return\ An\ array\ of\ Strings\ representing\ the\ colors\ of\ the\ spots\ that\ can\ be\ reached.\r\n
comment60.params=
comment60.target=java.lang.String\ getSpiderColor()
comment60.text=\r\n\ gets\ spider's\ body\ color\ \r\n
comment61.params=
comment61.target=Spider\ getSpider()
comment61.text=\r\n\ gets\ spider\ \r\n
comment7.params=percentage
comment7.target=void\ enlarge(int)
comment7.text=\r\n\ This\ method\ is\ used\ to\ lengthen\ the\ length\ of\ the\ threads\r\n\r\n\ @param\ percentage\ the\ percentage\ to\ increase\ the\ length\ of\ the\ threads\r\n
comment8.params=
comment8.target=void\ relocateSpots()
comment8.text=\r\n\ Relocates\ spots\ when\ their\ radius\ is\ modified\r\n
comment9.params=
comment9.target=void\ makeVisible()
comment9.text=\r\n\ Make\ visible\ all\ the\ simulator\r\n
numComments=62
